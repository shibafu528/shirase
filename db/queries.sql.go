// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: queries.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createAccount = `-- name: CreateAccount :execresult
INSERT INTO accounts (
    username, activity_pub_id, private_key, public_key
) VALUES (
    ?, ?, ?, ?
)
`

type CreateAccountParams struct {
	Username      string
	ActivityPubID sql.NullString
	PrivateKey    string
	PublicKey     string
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createAccount,
		arg.Username,
		arg.ActivityPubID,
		arg.PrivateKey,
		arg.PublicKey,
	)
}

const createStatus = `-- name: CreateStatus :execresult
INSERT INTO statuses (
    id, account_id, text
) VALUES(
    ?, ?, ?
)
`

type CreateStatusParams struct {
	ID        int64
	AccountID int64
	Text      string
}

func (q *Queries) CreateStatus(ctx context.Context, arg CreateStatusParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createStatus, arg.ID, arg.AccountID, arg.Text)
}

const getAccount = `-- name: GetAccount :one
SELECT id, username, domain, display_name, private_key, public_key, created_at, updated_at, activity_pub_id, description FROM accounts WHERE id = ? LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Domain,
		&i.DisplayName,
		&i.PrivateKey,
		&i.PublicKey,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ActivityPubID,
		&i.Description,
	)
	return i, err
}

const getAccountByActivityPubID = `-- name: GetAccountByActivityPubID :one
SELECT id, username, domain, display_name, private_key, public_key, created_at, updated_at, activity_pub_id, description FROM accounts WHERE activity_pub_id = ? LIMIT 1
`

func (q *Queries) GetAccountByActivityPubID(ctx context.Context, activityPubID sql.NullString) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountByActivityPubID, activityPubID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Domain,
		&i.DisplayName,
		&i.PrivateKey,
		&i.PublicKey,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ActivityPubID,
		&i.Description,
	)
	return i, err
}

const getAccountByUsername = `-- name: GetAccountByUsername :one
SELECT id, username, domain, display_name, private_key, public_key, created_at, updated_at, activity_pub_id, description FROM accounts WHERE username = ? LIMIT 1
`

func (q *Queries) GetAccountByUsername(ctx context.Context, username string) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountByUsername, username)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Domain,
		&i.DisplayName,
		&i.PrivateKey,
		&i.PublicKey,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ActivityPubID,
		&i.Description,
	)
	return i, err
}

const getAccountIDByActivityPubID = `-- name: GetAccountIDByActivityPubID :one
SELECT id FROM accounts WHERE activity_pub_id = ? LIMIT 1
`

func (q *Queries) GetAccountIDByActivityPubID(ctx context.Context, activityPubID sql.NullString) (int64, error) {
	row := q.db.QueryRowContext(ctx, getAccountIDByActivityPubID, activityPubID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getStatusesByAccountID = `-- name: GetStatusesByAccountID :many
SELECT
    s.id,
    s.account_id,
    s.text,
    s.created_at,
    s.updated_at,
    coalesce(a.activity_pub_id, a.username) activity_pub_id
FROM statuses s INNER JOIN accounts a ON s.account_id = a.id WHERE s.account_id = ? ORDER BY s.id DESC
`

type GetStatusesByAccountIDRow struct {
	ID            int64
	AccountID     int64
	Text          string
	CreatedAt     time.Time
	UpdatedAt     time.Time
	ActivityPubID string
}

func (q *Queries) GetStatusesByAccountID(ctx context.Context, accountID int64) ([]GetStatusesByAccountIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getStatusesByAccountID, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetStatusesByAccountIDRow
	for rows.Next() {
		var i GetStatusesByAccountIDRow
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Text,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ActivityPubID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
