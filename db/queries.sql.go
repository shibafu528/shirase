// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const createAccount = `-- name: CreateAccount :execresult
INSERT INTO accounts (
    username
) VALUES (
    ?
)
`

func (q *Queries) CreateAccount(ctx context.Context, username string) (sql.Result, error) {
	return q.db.ExecContext(ctx, createAccount, username)
}

const getAccount = `-- name: GetAccount :one
SELECT id, username, display_name, private_key, public_key FROM accounts WHERE id = ? LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.DisplayName,
		&i.PrivateKey,
		&i.PublicKey,
	)
	return i, err
}

const getAccountByUsername = `-- name: GetAccountByUsername :one
SELECT id, username, display_name, private_key, public_key FROM accounts WHERE username = ? LIMIT 1
`

func (q *Queries) GetAccountByUsername(ctx context.Context, username string) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountByUsername, username)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.DisplayName,
		&i.PrivateKey,
		&i.PublicKey,
	)
	return i, err
}
